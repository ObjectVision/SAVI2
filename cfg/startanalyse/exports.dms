container Exports {

	//container buurt_indicators := Templates/ExportStrategiesToTilejson();
	
	container strats { 
		container export_strat1 := Templates/ExportStrategieToTilejson(false, 1b);
		container export_strat2 := Templates/ExportStrategieToTilejson(false, 2b);
		container export_strat3 := Templates/ExportStrategieToTilejson(false, 3b);
		container export_strat4 := Templates/ExportStrategieToTilejson(false, 4b);
		container export_strat5 := Templates/ExportStrategieToTilejson(false, 5b);
		container export_strat6 := Templates/ExportStrategieToTilejson(true, 6b);  // ref19
		container export_strat7 := Templates/ExportStrategieToTilejson(true, 7b);  // ref30
		container export_strat8 := Templates/ExportStrategieToTilejson(false, 8b); // stratNL
		
		parameter<string> export_all := "Done", ExplicitSuppliers="Exports/strats/export_strat1/MVT/all_zoom_levels/dataset;Exports/strats/export_strat2/MVT/all_zoom_levels/dataset;Exports/strats/export_strat3/MVT/all_zoom_levels/dataset;Exports/strats/export_strat4/MVT/all_zoom_levels/dataset;Exports/strats/export_strat5/MVT/all_zoom_levels/dataset;Exports/strats/export_strat6/MVT/all_zoom_levels/dataset;Exports/strats/export_strat7/MVT/all_zoom_levels/dataset;Exports/strats/export_strat8/MVT/all_zoom_levels/dataset";
	}
	
	container panden {
		//ogr2ogr -f MVT ./test_tiles .\pand.gpkg -dsco MAX_SIZE=50000000 -dsco MAX_FEATURES=2000000 -dsco MINZOOM=12 -dsco MAXZOOM=18 -dsco COMPRESS=NO -dsco SIMPLIFICATION=0.0 -dsco SIMPLIFICATION_MAX_ZOOM=0.0 -dsco FORMAT=DIRECTORY -dsco CONF=C:/Users/Cicada/prj/SAVI2/data/pand.json
		
		unit<uint32> optionSet := range(uint32, 0, 9);
		//attribute<string> GDAL_Options (optionSet) : ['MAX_SIZE=50000000', 'MAX_FEATURES=2000000', 'MINZOOM=12', 'MAXZOOM=18', 'COMPRESS=NO', 'SIMPLIFICATION=0.0', 'SIMPLIFICATION_MAX_ZOOM=0.0', 'FORMAT=DIRECTORY', 'CONF=C:/Users/Cicada/prj/SAVI2/data/pand.json'];
		parameter<string> GDAL_Driver : ['GPKG'];
		container pand
		: StorageName="%LocalDataDir%/startanalyse_2_0/pand/pand.gpkg"
		, StorageType="gdalwrite.vect"
		, StorageReadOnly = "False"
		{
			unit<uint32> pand_12 := select_with_attr_by_cond(SourceData/pand/pand_fss_read, const(true, SourceData/pand/pand_fss_read));
			unit<uint32> pand_13 := select_with_attr_by_cond(SourceData/pand/pand_fss_read, const(true, SourceData/pand/pand_fss_read));
			unit<uint32> pand_14 := select_with_attr_by_cond(SourceData/pand/pand_fss_read, const(true, SourceData/pand/pand_fss_read));
			unit<uint32> pand_15 := select_with_attr_by_cond(SourceData/pand/pand_fss_read, const(true, SourceData/pand/pand_fss_read));
			unit<uint32> pand_16 := select_with_attr_by_cond(SourceData/pand/pand_fss_read, const(true, SourceData/pand/pand_fss_read));
			unit<uint32> pand_17 := select_with_attr_by_cond(SourceData/pand/pand_fss_read, const(true, SourceData/pand/pand_fss_read));
			unit<uint32> pand_18 := select_with_attr_by_cond(SourceData/pand/pand_fss_read, const(true, SourceData/pand/pand_fss_read));
		}
	}

	container aanbod {
		parameter<string> export_all := "Done", ExplicitSuppliers="Exports/strats/export_strat1/MVT/all_zoom_levels/dataset;Exports/strats/export_strat2/MVT/all_zoom_levels/dataset;Exports/strats/export_strat3/MVT/all_zoom_levels/dataset;Exports/strats/export_strat4/MVT/all_zoom_levels/dataset;Exports/strats/export_strat5/MVT/all_zoom_levels/dataset;Exports/strats/export_strat6/MVT/all_zoom_levels/dataset;Exports/strats/export_strat7/MVT/all_zoom_levels/dataset;Exports/strats/export_strat8/MVT/all_zoom_levels/dataset";
		
		container gas := Templates/ExportGasTilejson();
		container geothermie {

			
			/*parameter<units/m> mid_f := 700[units/m];
			parameter<units/mm> mid_r := 100000[units/mm];
			unit<uint2> Direction {
				attribute<string> Label : [ 'North', 'East', 'South', 'West'];
				container V:= for_each_nedv(Label, string(ID(.))+'[..]', void, .);
				attribute<.> Next    := union_data(., V/West, V/North, V/East, V/South);
				attribute<.> Reverse := union_data(., V/South, V/West, V/North, V/East);
			}*/
			
			//container grid := Templates/grid_template(mid_r, geography/rdc_mm_upper_left, geography/rdc_mm_lower_right);
			//container simplify := Templates/SimplifyPolygons_ipoint(SourceData/aanbod/geothermie, grid/domain, mid_f);
			container base { 
				unit<uint32> data := SourceData/aanbod/geothermie {
					attribute<uint32> id := id(.);
					attribute<geography/rdc_m_ipoint> geometry (poly) := SourceData/aanbod/geothermie/geometry_rdc_m_ipoint;
					attribute<uint32> class := uint32(SourceData/aanbod/geothermie/gridcode);
				}
				
				unit<uint32> split_polygons := split_polygon(data/geometry);
				unit<uint32> final := split_polygons {
					attribute<uint32> id := split_polygons/polygon_rel;
					attribute<uint32> class := data/class[split_polygons/polygon_rel];
					attribute<geography/wm_m> geometry (poly) := convert(split_polygons/geometry, geography/wm_m);
				}
			}
			
			container MVT {
				parameter<string> GDAL_Driver : ['MVT'];
			
				unit<uint32> optionSet := range(uint32, 0, 9);				
				attribute<string> GDAL_Options (optionSet) : ['MAX_SIZE=50000000', 'MAX_FEATURES=2000000', 'MINZOOM=5', 'MAXZOOM=15', 'COMPRESS=NO', 'SIMPLIFICATION=0.0', 'SIMPLIFICATION_MAX_ZOOM=0.0', 'FORMAT=DIRECTORY', 'CONF=C:/Users/Cicada/prj/SAVI2/data/conf_zoom_geothermie.json'];
				
				container dataset
				: StorageName="%LocalDataDir%/startanalyse_2_0/aanbod/Geothermie"
				, StorageType="gdalwrite.vect"
				, StorageReadOnly = "False"
				{
					unit<uint32> strat_05 := select_with_attr_by_cond(base/final, const(true, base/final));
					unit<uint32> strat_06 := select_with_attr_by_cond(base/final, const(true, base/final));
					unit<uint32> strat_07 := select_with_attr_by_cond(base/final, const(true, base/final));
					unit<uint32> strat_08 := select_with_attr_by_cond(base/final, const(true, base/final));
					unit<uint32> strat_09 := select_with_attr_by_cond(base/final, const(true, base/final));
					unit<uint32> strat_10 := select_with_attr_by_cond(base/final, const(true, base/final));
					unit<uint32> strat_11 := select_with_attr_by_cond(base/final, const(true, base/final));
					unit<uint32> strat_12 := select_with_attr_by_cond(base/final, const(true, base/final));
					unit<uint32> strat_13 := select_with_attr_by_cond(base/final, const(true, base/final));
					unit<uint32> strat_14 := select_with_attr_by_cond(base/final, const(true, base/final));
					unit<uint32> strat_15 := select_with_attr_by_cond(base/final, const(true, base/final));
				}
			}
		}
		
		/*unit<uint32> geothermie := SourceData/aanbod/geothermie
		, storageName="%LocalDataDir%/startanalyse_2_0/aanbod/geothermie.geojson"
		, storageType="gdalwrite.vect"
		, StorageReadOnly = "False"
		{
			attribute<geography/wm_m> geometry (poly) := convert(SourceData/aanbod/geothermie/geometry, geography/wm_m);
		}*/
		
		container puntbronnen {
			unit<uint32> lt := SourceData/aanbod/puntbronnen/lt
			, storageName="%LocalDataDir%/startanalyse_2_0/aanbod/lt.geojson"
			, storageType="gdalwrite.vect"
			, StorageReadOnly = "False"
			{
				attribute<geography/wgs_base> geometry := SourceData/aanbod/puntbronnen/lt/geometry[geography/wgs_base];
				attribute<string> bron_naam := SourceData/aanbod/puntbronnen/lt/bron_naam;
				attribute<string> bron_type := SourceData/aanbod/puntbronnen/lt/type_bron;
				attribute<string> MWcapaciteit := SourceData/aanbod/puntbronnen/lt/MWcapaciteit;
				// ... //
			}
			
			unit<uint32> mt := SourceData/aanbod/puntbronnen/mt 
			, storageName="%LocalDataDir%/startanalyse_2_0/aanbod/mt.geojson"
			, storageType="gdalwrite.vect"
			, StorageReadOnly = "False"
			{
				attribute<geography/wgs_base> geometry := convert(SourceData/aanbod/puntbronnen/mt/geometry, geography/wgs_base);
				attribute<string> bron_naam := SourceData/aanbod/puntbronnen/mt/bron_naam;
				attribute<string> bron_type := SourceData/aanbod/puntbronnen/mt/type_bron;
				attribute<string> MWcapaciteit := SourceData/aanbod/puntbronnen/mt/MWcapaciteit;
				// ... //
			}
		}
		
		container WKO {
			container base { 
				unit<uint32> data := SourceData/aanbod/WKO {
					attribute<uint32> id := id(.);
					attribute<geography/rdc_m_ipoint> geometry (poly) := SourceData/aanbod/WKO/geometry_rdc_m_ipoint;
				}
				
				unit<uint32> split_polygons := split_polygon(data/geometry);
				unit<uint32> final := split_polygons {
					attribute<uint32> id := split_polygons/polygon_rel;
					attribute<geography/wm_m> geometry (poly) := convert(split_polygons/geometry, geography/wm_m);
				}
			}
			
			container MVT {
				parameter<string> GDAL_Driver : ['MVT'];
			
				unit<uint32> optionSet := range(uint32, 0, 9);				
				attribute<string> GDAL_Options (optionSet) : ['MAX_SIZE=50000000', 'MAX_FEATURES=2000000', 'MINZOOM=5', 'MAXZOOM=15', 'COMPRESS=NO', 'SIMPLIFICATION=0.0', 'SIMPLIFICATION_MAX_ZOOM=0.0', 'FORMAT=DIRECTORY', 'CONF=C:/Users/Cicada/prj/SAVI2/data/conf_zoom_wko.json'];
				
				container dataset
				: StorageName="%LocalDataDir%/startanalyse_2_0/aanbod/WKO"
				, StorageType="gdalwrite.vect"
				, StorageReadOnly = "False"
				{
					unit<uint32> strat_05 := select_with_attr_by_cond(base/final, const(true, base/final));
					unit<uint32> strat_06 := select_with_attr_by_cond(base/final, const(true, base/final));
					unit<uint32> strat_07 := select_with_attr_by_cond(base/final, const(true, base/final));
					unit<uint32> strat_08 := select_with_attr_by_cond(base/final, const(true, base/final));
					unit<uint32> strat_09 := select_with_attr_by_cond(base/final, const(true, base/final));
					unit<uint32> strat_10 := select_with_attr_by_cond(base/final, const(true, base/final));
					unit<uint32> strat_11 := select_with_attr_by_cond(base/final, const(true, base/final));
					unit<uint32> strat_12 := select_with_attr_by_cond(base/final, const(true, base/final));
					unit<uint32> strat_13 := select_with_attr_by_cond(base/final, const(true, base/final));
					unit<uint32> strat_14 := select_with_attr_by_cond(base/final, const(true, base/final));
					unit<uint32> strat_15 := select_with_attr_by_cond(base/final, const(true, base/final));
				}
			}
		}
		
		container TEO {
			container base { 
				unit<uint32> data := SourceData/aanbod/TEO {
					attribute<uint32> id := id(.);
					attribute<geography/rdc_m_ipoint> geometry (poly) := SourceData/aanbod/TEO/geometry_rdc_m_ipoint;
				}
				
				unit<uint32> split_polygons := split_polygon(data/geometry);
				unit<uint32> final := split_polygons {
					attribute<uint32> id := split_polygons/polygon_rel;
					attribute<geography/wm_m> geometry (poly) := convert(split_polygons/geometry, geography/wm_m);
					attribute<string> naam := SourceData/aanbod/TEO/naam[split_polygons/polygon_rel];
					attribute<string> waterschap := SourceData/aanbod/TEO/waterschap[split_polygons/polygon_rel];
					attribute<float32> Potentie := float32(SourceData/aanbod/TEO/pot_mwh[split_polygons/polygon_rel]);
				}
			}
			
			container MVT {
				parameter<string> GDAL_Driver : ['MVT'];
			
				unit<uint32> optionSet := range(uint32, 0, 9);				
				attribute<string> GDAL_Options (optionSet) : ['MAX_SIZE=50000000', 'MAX_FEATURES=2000000', 'MINZOOM=5', 'MAXZOOM=15', 'COMPRESS=NO', 'SIMPLIFICATION=0.0', 'SIMPLIFICATION_MAX_ZOOM=0.0', 'FORMAT=DIRECTORY', 'CONF=C:/Users/Cicada/prj/SAVI2/data/conf_zoom_teo.json'];
				
				container dataset
				: StorageName="%LocalDataDir%/startanalyse_2_0/aanbod/TEO"
				, StorageType="gdalwrite.vect"
				, StorageReadOnly = "False"
				{
					unit<uint32> strat_05 := select_with_attr_by_cond(base/final, const(true, base/final));
					unit<uint32> strat_06 := select_with_attr_by_cond(base/final, const(true, base/final));
					unit<uint32> strat_07 := select_with_attr_by_cond(base/final, const(true, base/final));
					unit<uint32> strat_08 := select_with_attr_by_cond(base/final, const(true, base/final));
					unit<uint32> strat_09 := select_with_attr_by_cond(base/final, const(true, base/final));
					unit<uint32> strat_10 := select_with_attr_by_cond(base/final, const(true, base/final));
					unit<uint32> strat_11 := select_with_attr_by_cond(base/final, const(true, base/final));
					unit<uint32> strat_12 := select_with_attr_by_cond(base/final, const(true, base/final));
					unit<uint32> strat_13 := select_with_attr_by_cond(base/final, const(true, base/final));
					unit<uint32> strat_14 := select_with_attr_by_cond(base/final, const(true, base/final));
					unit<uint32> strat_15 := select_with_attr_by_cond(base/final, const(true, base/final));
				}
			}
		}
	}
	
	container klimaat {
	    parameter<string> GDAL_Driver : ['MBTiles'];
		unit<spoint> referentie_1981_2010 := SourceData/klimaat/referentie_1981_2010
		,   StorageName = "%LocalDataDir%/startanalyse_2_0/klimaat/klimaat_1981_2010.mbtiles"
		,   StorageType = "gdalwrite.grid" 
		{    
			attribute<uint8> GridData := uint8(SourceData/klimaat/referentie_1981_2010/GridData);
		}
	}
}