container Analyses {
	container simplify {
		unit<uint2> Direction {
			attribute<string> Label : [ 'North', 'East', 'South', 'West'];
			container V:= for_each_nedv(Label, string(ID(.))+'[..]', void, .);
			attribute<.> Next    := union_data(., V/West, V/North, V/East, V/South);
			attribute<.> Reverse := union_data(., V/South, V/West, V/North, V/East);
		}

		container zoom_level_11_100m := Templates/SimplifyPolygons_ipoint(SourceData/buurt2020, /geography/gridsets/m_100/domain, 10[units/m]);
		container zoom_level_11_10m  := Templates/SimplifyPolygons_ipoint(SourceData/buurt2020, /geography/gridsets/m_10/domain, 10[units/m]);
		
		container per_factor := for_each_ne (
			  /parameters/simplify/factors/name
			, 'Templates/SimplifyForFactor(' + string(parameters/simplify/factors/id) + '[units/m])'
		);

	}

	/*container reference_vergrid_13 {
		attribute<SourceData/buurt2020> buurt_2020_rel (geography/wm_tiles_grid/grid_13) := 
			poly2grid(SourceData/buurt2020/geometry_wm, geography/wm_tiles_grid/grid_13);
		unit<uint32> tiles_with_data := select_with_org_rel(IsDefined(buurt_2020_rel)) {
			attribute<string> name := 'nr_' + string(id(.));
		}
		
		
		container grid_export := for_each_ne (
			  tiles_with_data/name
			, 'Templates/clip_tile_and_export(geography/wm_tiles_grid/grid_13, ' + quote(tiles_with_data/name) + ', /geography/wm_tiles_grid/extent/tile_size_and_number/tile_size)' 
			);
	}*/
}